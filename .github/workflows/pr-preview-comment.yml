name: Comment when PR preview is ready

on:
  workflow_run:
    workflows: ['PR Artifact Preview']   # must equal your PR preview workflow name
    types: [completed]

permissions:
  issues: write
  contents: read
  pull-requests: read
  actions: read

jobs:
  comment:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v8
        with:
          script: |
            const run = context.payload.workflow_run;
            const { owner, repo } = context.repo;

            // Only handle PR-driven runs
            if (run.event !== 'pull_request') {
              core.notice(`workflow_run event was '${run.event}', not 'pull_request' â€” skipping comment.`);
              return;
            }

            let prNumber = run.pull_requests?.[0]?.number;

            // 1) Best: PRs attached to this workflow run (call route directly)
            if (!prNumber) {
              try {
                const resp = await github.request(
                  'GET /repos/{owner}/{repo}/actions/runs/{run_id}/pull_requests',
                  { owner, repo, run_id: run.id, per_page: 10 }
                );
                const arr = Array.isArray(resp.data) ? resp.data : resp.data?.pull_requests || [];
                if (arr.length > 0) {
                  prNumber = arr[0].number;
                  core.notice(`Found PR via actions.runs.pull_requests: #${prNumber}`);
                }
              } catch (e) {
                core.notice(`Could not list PRs for run: ${e.message}`);
              }
            }

            // 2) Next: resolve by head owner/branch (works for forks)
            if (!prNumber) {
              let headOwner = run.head_repository?.owner?.login;
              let headBranch = run.head_branch;

              if (!headOwner || !headBranch) {
                // Re-fetch the run to get expanded fields
                try {
                  const rf = await github.request(
                    'GET /repos/{owner}/{repo}/actions/runs/{run_id}',
                    { owner, repo, run_id: run.id }
                  );
                  headOwner  ||= rf.data?.head_repository?.owner?.login;
                  headBranch ||= rf.data?.head_branch;
                } catch (e) {
                  core.notice(`Refetch failed: ${e.message}`);
                }
              }

              if (headOwner && headBranch) {
                const headRef = `${headOwner}:${headBranch}`;
                try {
                  const list = await github.request(
                    'GET /repos/{owner}/{repo}/pulls',
                    { owner, repo, state: 'all', head: headRef, per_page: 1 }
                  );
                  if (list.data?.length > 0) {
                    prNumber = list.data[0].number;
                    core.notice(`Found PR via pulls.list head=${headRef}: #${prNumber}`);
                  }
                } catch (e) {
                  core.notice(`pulls.list failed: ${e.message}`);
                }
              } else {
                core.notice('Missing head_owner/head_branch; cannot use pulls.list head filter.');
              }
            }

            // 3) Last resort: search by head SHA in this repo (may miss forks)
            if (!prNumber) {
              try {
                const search = await github.request(
                  'GET /search/issues',
                  { q: `repo:${owner}/${repo} is:pr sha:${run.head_sha}`, per_page: 1 }
                );
                if (search.data.total_count > 0) {
                  prNumber = search.data.items[0].number;
                  core.notice(`Found PR via search.sha: #${prNumber}`);
                }
              } catch (e) {
                core.notice(`Search by SHA failed: ${e.message}`);
              }
            }

            if (!prNumber) {
              core.notice('Could not determine PR number for this run â€” skipping comment.');
              return;
            }

            const runUrl = run.html_url || `https://github.com/${owner}/${repo}/actions/runs/${run.id}`;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: prNumber,
              body: [
                "ðŸ”Ž **Preview artifact is ready.**",
                "",
                `â€¢ Open **[this workflow run](${runUrl})** â†’ **Artifacts** â†’ download **pr-preview-site** (or the Pages artifact).`,
                "â€¢ Unzip and open \`index.html\` locally to review the site.",
                "",
                "_Note: Notebook execution is disabled in PR previews for security._"
              ].join("\n")
            });
